; .\LCD.SRC generated from: LCD.c
; COMPILER INVOKED BY:
;        C:\Keil\C51\BIN\C51.EXE LCD.c LARGE BROWSE DEBUG OBJECTEXTEND SRC(.\LCD.SRC)

$NOMOD51

NAME	LCD

ModuleSelect0	BIT	0B0H.7
ModuleSelect1	BIT	0B0H.6
P0	DATA	080H
P1	DATA	090H
P2	DATA	0A0H
P3	DATA	0B0H
T0	BIT	0B0H.4
AC	BIT	0D0H.6
T1	BIT	0B0H.5
EA	BIT	0A8H.7
IE	DATA	0A8H
RD	BIT	0B0H.7
ES	BIT	0A8H.4
IP	DATA	0B8H
RI	BIT	098H.0
INT0	BIT	0B0H.2
CY	BIT	0D0H.7
TI	BIT	098H.1
INT1	BIT	0B0H.3
Keyboard_key_10	BIT	080H.6
PS	BIT	0B8H.4
SP	DATA	081H
Keyboard_key_11	BIT	080H.5
Keyboard_key_12	BIT	080H.4
OV	BIT	0D0H.2
WR	BIT	0B0H.6
lcd_d5	BIT	090H.5
Buzzer_pin	BIT	080H.0
lcd_d6	BIT	090H.6
SBUF	DATA	099H
PCON	DATA	087H
SCON	DATA	098H
TMOD	DATA	089H
TCON	DATA	088H
RS_lcd	BIT	090H.2
IE0	BIT	088H.1
IE1	BIT	088H.3
B	DATA	0F0H
EM_lock_pin	BIT	080H.3
ACC	DATA	0E0H
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
TF1	BIT	088H.7
RB8	BIT	098H.2
TH0	DATA	08CH
EX0	BIT	0A8H.0
IT0	BIT	088H.0
TH1	DATA	08DH
TB8	BIT	098H.3
EX1	BIT	0A8H.2
IT1	BIT	088H.2
P	BIT	0D0H.0
lcd_d4_lsb	BIT	090H.4
SM0	BIT	098H.7
TL0	DATA	08AH
SM1	BIT	098H.6
TL1	DATA	08BH
SM2	BIT	098H.5
lcd_d7_msb	BIT	090H.7
PT0	BIT	0B8H.1
PT1	BIT	0B8H.3
RS0	BIT	0D0H.3
TR0	BIT	088H.4
RS1	BIT	0D0H.4
TR1	BIT	088H.6
PX0	BIT	0B8H.0
PX1	BIT	0B8H.2
DPH	DATA	083H
Enable_lcd	BIT	090H.3
DPL	DATA	082H
REN	BIT	098H.4
RXD	BIT	0B0H.0
TXD	BIT	0B0H.1
Keyboard_key_1	BIT	0A0H.0
Keyboard_key_2	BIT	0A0H.1
Keyboard_key_3	BIT	0A0H.2
Keyboard_key_4	BIT	0A0H.3
F0	BIT	0D0H.5
Keyboard_key_5	BIT	0A0H.4
Keyboard_key_6	BIT	0A0H.5
Keyboard_key_7	BIT	0A0H.6
Keyboard_key_8	BIT	0A0H.7
Keyboard_key_9	BIT	080H.7
PSW	DATA	0D0H
EM_lock_enabe_button	BIT	080H.2
?PR?_fn_Display_String_LCD?LCD           SEGMENT CODE 
?XD?_fn_Display_String_LCD?LCD           SEGMENT XDATA OVERLAYABLE 
?PR?write_port_lcd?LCD                   SEGMENT CODE 
?BI?write_port_lcd?LCD                   SEGMENT BIT OVERLAYABLE 
?PR?lcd_write_command?LCD                SEGMENT CODE 
?PR?lcd_write_data?LCD                   SEGMENT CODE 
?PR?lcd_dummy_write?LCD                  SEGMENT CODE 
?PR?lcd_16_2_Initialisation?LCD          SEGMENT CODE 
?PR?_fn_lcd_select_line_and_location?LCD SEGMENT CODE 
?C_INITSEG           SEGMENT CODE 
?BI?LCD              SEGMENT BIT 
	EXTRN	CODE (_delay_in_ms)
	EXTRN	DATA (uch_Lcd_Data)
	EXTRN	CODE (_delay_in_half_seconds)
	EXTRN	CODE (_delay_100us)
	EXTRN	CODE (?C?CLDPTR)
	EXTRN	CODE (?C?IILDX)
	PUBLIC	sel_reg
	PUBLIC	_fn_lcd_select_line_and_location
	PUBLIC	lcd_16_2_Initialisation
	PUBLIC	lcd_dummy_write
	PUBLIC	lcd_write_data
	PUBLIC	lcd_write_command
	PUBLIC	?write_port_lcd?BIT
	PUBLIC	write_port_lcd
	PUBLIC	_fn_Display_String_LCD

	RSEG  ?XD?_fn_Display_String_LCD?LCD
?_fn_Display_String_LCD?BYTE:
generic_ptr?040:   DS   3

	RSEG  ?BI?write_port_lcd?LCD
?write_port_lcd?BIT:
high_low_nibble?141:   DBIT   1

	RSEG  ?BI?LCD
        sel_reg:   DBIT   1

	RSEG  ?C_INITSEG
	DB	0C1H, sel_reg + 000H	; bit-init

; /*
; LCD.c
; */
; 
; #include <reg51.h>
; #include <intrins.h>
; #include "LCD.h"
; #include "delay.h"
; #include "PinAllocation.h"
; 
; bit sel_reg=0;		// for data write/command write used in void lcd_cmdw(unsigned char a) 
; 
; //unsigned char uch_Lcd_Data;
; 
; void fn_Display_String_LCD(unsigned char *generic_ptr)

	RSEG  ?PR?_fn_Display_String_LCD?LCD
_fn_Display_String_LCD:
	USING	0
			; SOURCE LINE # 15
	MOV  	DPTR,#generic_ptr?040
	MOV  	A,R3
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,R2
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,R1
	MOVX 	@DPTR,A
; {   
			; SOURCE LINE # 16
?C0001:
; 	while (*generic_ptr) 
			; SOURCE LINE # 17
	MOV  	DPTR,#generic_ptr?040
	MOVX 	A,@DPTR
	MOV  	R3,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R2,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R1,A
	LCALL	?C?CLDPTR
	MOV  	R7,A
	JZ   	?C0003
; 	{
			; SOURCE LINE # 18
; 	    uch_Lcd_Data =*generic_ptr;
			; SOURCE LINE # 19
	MOV  	uch_Lcd_Data,A
;         lcd_write_data();
			; SOURCE LINE # 20
	LCALL	lcd_write_data
; 		generic_ptr++;
			; SOURCE LINE # 21
	MOV  	DPTR,#generic_ptr?040+01H
	CLR  	A
	MOV  	B,#01H
	LCALL	?C?IILDX
; 	}
			; SOURCE LINE # 22
	SJMP 	?C0001
; }
			; SOURCE LINE # 23
?C0003:
	RET  	
; END OF _fn_Display_String_LCD

; 
; void write_port_lcd(bit high_low_nibble) 

	RSEG  ?PR?write_port_lcd?LCD
L?0014:
	USING	0
	CLR  	RS_lcd
L?0015:
	CLR  	Enable_lcd
	SETB 	?write_port_lcd?BIT
write_port_lcd:
			; SOURCE LINE # 25
; {
			; SOURCE LINE # 26
;     if (high_low_nibble != 0)
			; SOURCE LINE # 27
	MOV  	A,uch_Lcd_Data
	JNB  	high_low_nibble?141,?C0004
;     {
			; SOURCE LINE # 28
;         lcd_d7_msb	=	uch_Lcd_Data & 0x80;   
			; SOURCE LINE # 29
	RLC  	A
	MOV  	lcd_d7_msb,C
;         lcd_d6		=	uch_Lcd_Data & 0x40;   
			; SOURCE LINE # 30
	MOV  	A,uch_Lcd_Data
	MOV  	C,ACC.6
	MOV  	lcd_d6,C
;         lcd_d5		=	uch_Lcd_Data & 0x20;  
			; SOURCE LINE # 31
	MOV  	C,ACC.5
	MOV  	lcd_d5,C
;         lcd_d4_lsb	=	uch_Lcd_Data & 0x10;  
			; SOURCE LINE # 32
	MOV  	C,ACC.4
	MOV  	lcd_d4_lsb,C
;     }
			; SOURCE LINE # 33
	RET  	
?C0004:
;     else
;     {
			; SOURCE LINE # 35
;         lcd_d7_msb	=	uch_Lcd_Data & 0x08;   
			; SOURCE LINE # 36
	MOV  	C,ACC.3
	MOV  	lcd_d7_msb,C
;         lcd_d6		=	uch_Lcd_Data & 0x04;   
			; SOURCE LINE # 37
	MOV  	C,ACC.2
	MOV  	lcd_d6,C
;         lcd_d5		=	uch_Lcd_Data & 0x02;   
			; SOURCE LINE # 38
	MOV  	C,ACC.1
	MOV  	lcd_d5,C
;         lcd_d4_lsb	=	uch_Lcd_Data & 0x01;   
			; SOURCE LINE # 39
	RRC  	A
	MOV  	lcd_d4_lsb,C
;     }
			; SOURCE LINE # 40
; }    
			; SOURCE LINE # 41
?C0006:
	RET  	
; END OF write_port_lcd

; void lcd_write_command(void) 

	RSEG  ?PR?lcd_write_command?LCD
lcd_write_command:
	USING	0
			; SOURCE LINE # 42
; {
			; SOURCE LINE # 43
;     RS_lcd = 0;
			; SOURCE LINE # 44
;     Enable_lcd = 0;	
			; SOURCE LINE # 45
;     write_port_lcd(HIGHER_NIBBLE);
			; SOURCE LINE # 46
	LCALL	L?0014
;     _nop_ ();
			; SOURCE LINE # 47
	NOP  	
;     _nop_ ();
			; SOURCE LINE # 48
	NOP  	
;     _nop_ ();
			; SOURCE LINE # 49
	NOP  	
;     Enable_lcd = 1;
			; SOURCE LINE # 50
	SETB 	Enable_lcd
;     delay_100us(1);
			; SOURCE LINE # 51
	MOV  	R7,#01H
	LCALL	_delay_100us
;     Enable_lcd = 0;
			; SOURCE LINE # 52
	CLR  	Enable_lcd
;     
;     _nop_ ();
			; SOURCE LINE # 54
	NOP  	
;     _nop_ ();
			; SOURCE LINE # 55
	NOP  	
;     _nop_ ();
			; SOURCE LINE # 56
	NOP  	
; 
;     write_port_lcd(LOWER_NIBBLE);
			; SOURCE LINE # 58
	CLR  	?write_port_lcd?BIT
	LCALL	write_port_lcd
;     _nop_ ();
			; SOURCE LINE # 59
	NOP  	
;     _nop_ ();
			; SOURCE LINE # 60
	NOP  	
;     _nop_ ();
			; SOURCE LINE # 61
	NOP  	
;     Enable_lcd = 1;
			; SOURCE LINE # 62
	SETB 	Enable_lcd
;     delay_100us(1);
			; SOURCE LINE # 63
	MOV  	R7,#01H
	LCALL	_delay_100us
;     Enable_lcd = 0;
			; SOURCE LINE # 64
	CLR  	Enable_lcd
;     
; }
			; SOURCE LINE # 66
	RET  	
; END OF lcd_write_command

; void lcd_write_data(void) 

	RSEG  ?PR?lcd_write_data?LCD
lcd_write_data:
	USING	0
			; SOURCE LINE # 67
; {
			; SOURCE LINE # 68
;     RS_lcd = 1;
			; SOURCE LINE # 69
	SETB 	RS_lcd
;     Enable_lcd = 0;	
			; SOURCE LINE # 70
;     write_port_lcd(HIGHER_NIBBLE);
			; SOURCE LINE # 71
	LCALL	L?0015
;     _nop_ ();
			; SOURCE LINE # 72
	NOP  	
;     _nop_ ();
			; SOURCE LINE # 73
	NOP  	
;     _nop_ ();
			; SOURCE LINE # 74
	NOP  	
;     Enable_lcd = 1;
			; SOURCE LINE # 75
	SETB 	Enable_lcd
;     delay_100us(1);
			; SOURCE LINE # 76
	MOV  	R7,#01H
	LCALL	_delay_100us
;     Enable_lcd = 0;
			; SOURCE LINE # 77
	CLR  	Enable_lcd
; 
;     _nop_ ();
			; SOURCE LINE # 79
	NOP  	
;     _nop_ ();
			; SOURCE LINE # 80
	NOP  	
;     _nop_ ();
			; SOURCE LINE # 81
	NOP  	
; 
;     write_port_lcd(LOWER_NIBBLE);
			; SOURCE LINE # 83
	CLR  	?write_port_lcd?BIT
	LCALL	write_port_lcd
;     _nop_ ();
			; SOURCE LINE # 84
	NOP  	
;     _nop_ ();
			; SOURCE LINE # 85
	NOP  	
;     _nop_ ();
			; SOURCE LINE # 86
	NOP  	
;     Enable_lcd = 1;
			; SOURCE LINE # 87
	SETB 	Enable_lcd
;     delay_100us(1);
			; SOURCE LINE # 88
	MOV  	R7,#01H
	LCALL	_delay_100us
;     Enable_lcd = 0;
			; SOURCE LINE # 89
	CLR  	Enable_lcd
; }
			; SOURCE LINE # 90
	RET  	
; END OF lcd_write_data

; void lcd_dummy_write(void) 

	RSEG  ?PR?lcd_dummy_write?LCD
lcd_dummy_write:
	USING	0
			; SOURCE LINE # 91
; {
			; SOURCE LINE # 92
;     uch_Lcd_Data = 0x20;
			; SOURCE LINE # 93
	MOV  	uch_Lcd_Data,#020H
; 
;     RS_lcd = 0;
			; SOURCE LINE # 95
;     Enable_lcd = 0;	
			; SOURCE LINE # 96
;     write_port_lcd(HIGHER_NIBBLE);
			; SOURCE LINE # 97
	LCALL	L?0014
;     _nop_ ();
			; SOURCE LINE # 98
	NOP  	
;     _nop_ ();
			; SOURCE LINE # 99
	NOP  	
;     _nop_ ();
			; SOURCE LINE # 100
	NOP  	
;     Enable_lcd = 1;
			; SOURCE LINE # 101
	SETB 	Enable_lcd
;     delay_100us(1);
			; SOURCE LINE # 102
	MOV  	R7,#01H
	LCALL	_delay_100us
;     Enable_lcd = 0;
			; SOURCE LINE # 103
	CLR  	Enable_lcd
; 
; }
			; SOURCE LINE # 105
	RET  	
; END OF lcd_dummy_write

; 
; 
; void lcd_16_2_Initialisation(void) 

	RSEG  ?PR?lcd_16_2_Initialisation?LCD
lcd_16_2_Initialisation:
	USING	0
			; SOURCE LINE # 108
; {
			; SOURCE LINE # 109
;     delay_in_half_seconds(1);
			; SOURCE LINE # 110
	MOV  	R7,#01H
	LCALL	_delay_in_half_seconds
;     lcd_dummy_write();
			; SOURCE LINE # 111
	LCALL	lcd_dummy_write
; 
;     uch_Lcd_Data = 0x2C;  ; //function set first time interface 8 bit long
			; SOURCE LINE # 113
	MOV  	uch_Lcd_Data,#02CH
;     lcd_write_command();
			; SOURCE LINE # 114
	LCALL	lcd_write_command
; 
;     uch_Lcd_Data = 0x0C;  ; //display 0ff
			; SOURCE LINE # 116
	MOV  	uch_Lcd_Data,#0CH
;     lcd_write_command();
			; SOURCE LINE # 117
	LCALL	lcd_write_command
;      
;     uch_Lcd_Data = 0x06;  ; //entry mode
			; SOURCE LINE # 119
	MOV  	uch_Lcd_Data,#06H
;     lcd_write_command();
			; SOURCE LINE # 120
	LCALL	lcd_write_command
;   
;     uch_Lcd_Data = 0x01;  ; //clear display
			; SOURCE LINE # 122
	MOV  	uch_Lcd_Data,#01H
;     lcd_write_command();
			; SOURCE LINE # 123
	LCALL	lcd_write_command
;     delay_in_ms(1);
			; SOURCE LINE # 124
	MOV  	R7,#01H
	LJMP 	_delay_in_ms
; END OF lcd_16_2_Initialisation

; }  	
; 
; void fn_lcd_select_line_and_location(char ch_line_no, char ch_location_no) 

	RSEG  ?PR?_fn_lcd_select_line_and_location?LCD
_fn_lcd_select_line_and_location:
	USING	0
			; SOURCE LINE # 127
;---- Variable 'ch_location_no?643' assigned to Register 'R5' ----
;---- Variable 'ch_line_no?642' assigned to Register 'R7' ----
; {
			; SOURCE LINE # 128
; 	if (ch_line_no== LCD_LINE_2)
			; SOURCE LINE # 129
	MOV  	A,R7
	CJNE 	A,#02H,?C0011
; 		uch_Lcd_Data = 0xC0 + ch_location_no;
			; SOURCE LINE # 130
	MOV  	A,R5
	ADD  	A,#0C0H
	MOV  	uch_Lcd_Data,A
	SJMP 	?C0012
?C0011:
; 	else
;     	uch_Lcd_Data = 0x80	+ ch_location_no;
			; SOURCE LINE # 132
	MOV  	A,R5
	ADD  	A,#080H
	MOV  	uch_Lcd_Data,A
?C0012:
; 
;     lcd_write_command();
			; SOURCE LINE # 134
	LCALL	lcd_write_command
;     delay_in_ms(1);
			; SOURCE LINE # 135
	MOV  	R7,#01H
	LJMP 	_delay_in_ms
; END OF _fn_lcd_select_line_and_location

	END
